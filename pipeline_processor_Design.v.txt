module pipelined_processor (
    input wire clk,
    input wire rst,
    input wire [7:0] instruction, 
    output reg [7:0] result       
);

    localparam ADD = 2'b00;
    localparam SUB = 2'b01;
    localparam LOAD = 2'b10;
    reg [7:0] if_id_instruction;  
    reg [7:0] id_ex_instruction;
    reg [7:0] ex_mem_result;     
    reg [7:0] mem_wb_result;


    reg [7:0] register_file [3:0];

    always @(posedge clk or posedge rst) begin
        if (rst) begin
            if_id_instruction <= 8'b0;
        end else begin
            if_id_instruction <= instruction;
        end
    end
    reg [1:0] opcode;
    reg [1:0] dst, src1, src2;
    reg [7:0] op1, op2;
    always @(posedge clk or posedge rst) begin
        if (rst) begin
            id_ex_instruction <= 8'b0;
        end else begin
            id_ex_instruction <= if_id_instruction;
            opcode <= if_id_instruction[7:6];
            dst <= if_id_instruction[5:4];
            src1 <= if_id_instruction[3:2];
            src2 <= if_id_instruction[1:0];
            op1 <= register_file[src1];
            op2 <= register_file[src2];
        end
    end
    reg [7:0] alu_result;
    always @(posedge clk or posedge rst) begin
        if (rst) begin
            ex_mem_result <= 8'b0;
        end else begin
            case (opcode)
                ADD: alu_result <= op1 + op2;
                SUB: alu_result <= op1 - op2; 
                LOAD: alu_result <= op1;     
                default: alu_result <= 8'b0;
            endcase
            ex_mem_result <= alu_result;
        end
    end
    always @(posedge clk or posedge rst) begin
        if (rst) begin
            mem_wb_result <= 8'b0;
        end else begin
            mem_wb_result <= ex_mem_result; 
        end
    end
    always @(posedge clk or posedge rst) begin
        if (rst) begin
            result <= 8'b0;
        end else begin
            register_file[dst] <= mem_wb_result;
            result <= mem_wb_result;
        end
    end

endmodule
